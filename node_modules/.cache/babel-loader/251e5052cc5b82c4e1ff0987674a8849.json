{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/Dev/React Class/speedtype/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\"; // import useGameLogic from \"./hooks/useGameLogic\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // function useGameLogic(startingTime = 10) {\n  //const STARTING_TIME = 5;\n  const [formData, setFormData] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(startingTime);\n  const [gameStart, setGameStart] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n  const inputRef = useRef(null);\n\n  function formValue(e) {\n    const {\n      value\n    } = e.target;\n    setFormData(value); // console.log(value);\n  }\n\n  function calculateWordCount(text) {\n    const wordArray = text.trim().split(\" \"); //trim out excess space int the beging and ending of the text\n    //then split into array\n\n    const filteredWords = wordArray.filter(word => word !== \"\");\n    return filteredWords.length;\n  }\n\n  function startGame() {\n    inputRef.current.focus();\n    setTimeRemaining(startingTime);\n    setGameStart(true);\n    setFormData(\"\"); //console.log(inputRef.current);\n    //i had to set the DOM to not disabled before the ref.current.focus works\n\n    inputRef.current.disabled = false;\n    inputRef.current.focus();\n  }\n\n  function endGame() {\n    setGameStart(false);\n    setWordCount(calculateWordCount(formData));\n  }\n\n  useEffect(() => {\n    //wait one second and decriment the timer state\n    if (timeRemaining > 0 && gameStart) {\n      setTimeout(() => {\n        setTimeRemaining(time => time - 1);\n      }, 1000);\n    } else if (timeRemaining === 0) {\n      endGame(); //const wordCounter = wordCount(formData);\n    }\n  }, [timeRemaining, gameStart]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"How fast do you type?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: inputRef,\n      value: formData,\n      onChange: formValue,\n      disabled: !gameStart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"TIme Remaining: \", timeRemaining, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startGame,\n      disabled: gameStart,\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Word Count: \", wordCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"YeUhi9jXCefaKdT1EBBdYlve1NA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","App","formData","setFormData","timeRemaining","setTimeRemaining","startingTime","gameStart","setGameStart","wordCount","setWordCount","inputRef","formValue","e","value","target","calculateWordCount","text","wordArray","trim","split","filteredWords","filter","word","length","startGame","current","focus","disabled","endGame","setTimeout","time"],"sources":["/Users/mac/Documents/Dev/React Class/speedtype/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n// import useGameLogic from \"./hooks/useGameLogic\";\n\nfunction App() {\n  // function useGameLogic(startingTime = 10) {\n  //const STARTING_TIME = 5;\n  const [formData, setFormData] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(startingTime);\n  const [gameStart, setGameStart] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n  const inputRef = useRef(null);\n\n  function formValue(e) {\n    const { value } = e.target;\n    setFormData(value);\n    // console.log(value);\n  }\n\n  function calculateWordCount(text) {\n    const wordArray = text.trim().split(\" \");\n    //trim out excess space int the beging and ending of the text\n    //then split into array\n    const filteredWords = wordArray.filter((word) => word !== \"\");\n    return filteredWords.length;\n  }\n\n  function startGame() {\n    inputRef.current.focus();\n    setTimeRemaining(startingTime);\n    setGameStart(true);\n    setFormData(\"\");\n    //console.log(inputRef.current);\n    //i had to set the DOM to not disabled before the ref.current.focus works\n    inputRef.current.disabled = false;\n    inputRef.current.focus();\n  }\n  function endGame() {\n    setGameStart(false);\n    setWordCount(calculateWordCount(formData));\n  }\n\n  useEffect(() => {\n    //wait one second and decriment the timer state\n    if (timeRemaining > 0 && gameStart) {\n      setTimeout(() => {\n        setTimeRemaining((time) => time - 1);\n      }, 1000);\n    } else if (timeRemaining === 0) {\n      endGame();\n      //const wordCounter = wordCount(formData);\n    }\n  }, [timeRemaining, gameStart]);\n\n  return (\n    <div>\n      <h1>How fast do you type?</h1>\n      <textarea\n        ref={inputRef}\n        value={formData}\n        onChange={formValue}\n        disabled={!gameStart}\n      />\n      <h4>TIme Remaining: {timeRemaining} seconds</h4>\n      {/* we passed in the state into the function on click  */}\n      <button onClick={startGame} disabled={gameStart}>\n        Start Game\n      </button>\n      <h1>Word Count: {wordCount}</h1>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,WAAP,C,CACA;;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAACQ,YAAD,CAAlD;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,CAAD,CAA1C;EACA,MAAMa,QAAQ,GAAGX,MAAM,CAAC,IAAD,CAAvB;;EAEA,SAASY,SAAT,CAAmBC,CAAnB,EAAsB;IACpB,MAAM;MAAEC;IAAF,IAAYD,CAAC,CAACE,MAApB;IACAZ,WAAW,CAACW,KAAD,CAAX,CAFoB,CAGpB;EACD;;EAED,SAASE,kBAAT,CAA4BC,IAA5B,EAAkC;IAChC,MAAMC,SAAS,GAAGD,IAAI,CAACE,IAAL,GAAYC,KAAZ,CAAkB,GAAlB,CAAlB,CADgC,CAEhC;IACA;;IACA,MAAMC,aAAa,GAAGH,SAAS,CAACI,MAAV,CAAkBC,IAAD,IAAUA,IAAI,KAAK,EAApC,CAAtB;IACA,OAAOF,aAAa,CAACG,MAArB;EACD;;EAED,SAASC,SAAT,GAAqB;IACnBd,QAAQ,CAACe,OAAT,CAAiBC,KAAjB;IACAtB,gBAAgB,CAACC,YAAD,CAAhB;IACAE,YAAY,CAAC,IAAD,CAAZ;IACAL,WAAW,CAAC,EAAD,CAAX,CAJmB,CAKnB;IACA;;IACAQ,QAAQ,CAACe,OAAT,CAAiBE,QAAjB,GAA4B,KAA5B;IACAjB,QAAQ,CAACe,OAAT,CAAiBC,KAAjB;EACD;;EACD,SAASE,OAAT,GAAmB;IACjBrB,YAAY,CAAC,KAAD,CAAZ;IACAE,YAAY,CAACM,kBAAkB,CAACd,QAAD,CAAnB,CAAZ;EACD;;EAEDH,SAAS,CAAC,MAAM;IACd;IACA,IAAIK,aAAa,GAAG,CAAhB,IAAqBG,SAAzB,EAAoC;MAClCuB,UAAU,CAAC,MAAM;QACfzB,gBAAgB,CAAE0B,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAhB;MACD,CAFS,EAEP,IAFO,CAAV;IAGD,CAJD,MAIO,IAAI3B,aAAa,KAAK,CAAtB,EAAyB;MAC9ByB,OAAO,GADuB,CAE9B;IACD;EACF,CAVQ,EAUN,CAACzB,aAAD,EAAgBG,SAAhB,CAVM,CAAT;EAYA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MACE,GAAG,EAAEI,QADP;MAEE,KAAK,EAAET,QAFT;MAGE,QAAQ,EAAEU,SAHZ;MAIE,QAAQ,EAAE,CAACL;IAJb;MAAA;MAAA;MAAA;IAAA,QAFF,eAQE;MAAA,+BAAqBH,aAArB;IAAA;MAAA;MAAA;MAAA;IAAA,QARF,eAUE;MAAQ,OAAO,EAAEqB,SAAjB;MAA4B,QAAQ,EAAElB,SAAtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAVF,eAaE;MAAA,2BAAiBE,SAAjB;IAAA;MAAA;MAAA;MAAA;IAAA,QAbF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD;;GAnEQR,G;;KAAAA,G;AAqET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}